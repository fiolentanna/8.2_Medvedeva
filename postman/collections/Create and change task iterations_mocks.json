{
	"info": {
		"_postman_id": "cf466a62-0f9b-4db5-9a01-0368815bd4cb",
		"name": "Create and change task iterations_mocks",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "14921549-cf466a62-0f9b-4db5-9a01-0368815bd4cb"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "94309edd-dbab-4757-8e95-87ebcded5bc7",
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.environment.set('token', jsonData.id_token)",
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'id_token'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('id_token');",
							"});",
							"",
							"",
							"pm.test(\"Id token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.id_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Id token is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.id_token).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Id token is successfully saved in the environment variables\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id_token).to.exist;",
							"});",
							"",
							"pm.test(\"Response status code is 400 when username is empty\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "4aa0428d-e83e-48bb-90f2-fc78f863892e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Origin",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com"
					},
					{
						"key": "Referer",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
					},
					{
						"key": "Sec-Fetch-Dest",
						"value": "empty"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors"
					},
					{
						"key": "Sec-Fetch-Site",
						"value": "same-origin"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"macOS\""
					},
					{
						"key": "x-mock-match-request-headers",
						"value": "400",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{adminLogin}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"rememberMe\": false\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/authenticate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"authenticate"
					]
				}
			},
			"response": [
				{
					"id": "ef492e55-143e-4517-981e-970bd2c8ea27",
					"name": "login",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "x-mock-match-request-headers",
								"value": "400",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{adminLogin}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"rememberMe\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						},
						{
							"key": "Accept",
							"value": "*/*",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id_token\": \"gjhgkjhgkjgkjgkjbdjhvfjhbskbnsdkmn1234567\"\n}"
				},
				{
					"id": "e424bd8b-f3a4-4364-9d00-2b4a570ffa41",
					"name": "login-no-username",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com"
							},
							{
								"key": "Referer",
								"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
							},
							{
								"key": "Sec-Fetch-Dest",
								"value": "empty"
							},
							{
								"key": "Sec-Fetch-Mode",
								"value": "cors"
							},
							{
								"key": "Sec-Fetch-Site",
								"value": "same-origin"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "x-mock-match-request-headers",
								"value": "400",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\",\n    \"password\": \"{{adminPassword}}\",\n    \"rememberMe\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						},
						{
							"key": "Accept",
							"value": "*/*",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "\"Please, provide your username\""
				}
			]
		},
		{
			"name": "get tasks list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "568b586a-0f22-455c-a453-c68636c5ebbd",
						"exec": [
							"// Получаем текущее количество задач из ответа",
							"let currentAmountOfTasks = pm.response.json().length;",
							"console.log(pm.response.json().length)",
							"",
							"// Устанавливаем идентификатор последней задачи из списка в переменную окружения",
							"pm.environment.set('lastID', pm.response.json()[pm.response.json().length-1].id);",
							"",
							"",
							"// Устанавливаем текущее количество задач в переменную окружения",
							"pm.environment.set('currentAmountOfTasks', currentAmountOfTasks);",
							"",
							"// Устанавливаем пустой массив айди тасок в переменную окружения",
							"pm.environment.set(\"ids\", []);",
							"",
							"// Устанавливаем условия реализации запросов в зависимости от количества тасок в базе данных и целевого значения количества тасок",
							"if (currentAmountOfTasks < pm.environment.get('targetNumberOfTasks')) {",
							"    // Если текущее количество задач меньше целевого, переходим к запросу \"create a task\"",
							"    postman.setNextRequest('create a task');",
							"} else {",
							"    // Иначе переходим к запросу \"change task text\"",
							"    postman.setNextRequest('change task text');",
							"}",
							"",
							"// Проверяем статус-код ответа 200",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Each task object has the required fields - id, text, answer, and title\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(task => {",
							"        pm.expect(task).to.have.property('id');",
							"        pm.expect(task).to.have.property('text');",
							"        pm.expect(task).to.have.property('answer');",
							"        pm.expect(task).to.have.property('title');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response contains an array of tasks\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Id of the last task is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"  responseData.forEach(function(task) {",
							"    pm.expect(task.id).to.be.a('number').that.is.gte(0);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Number of tasks is within an acceptable range\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.have.length.within(0, 2000);",
							"});",
							"",
							"pm.test(\"Response status code is 405 when wrong method\", function () {",
							"    pm.response.to.have.status(405);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "51412da5-e7d3-4de6-8e0d-33b6d32648ba",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "73babeba-ddf4-4af3-ae0c-2493656c5f81",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks?page=0&size=2000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "2000"
						}
					]
				}
			},
			"response": [
				{
					"id": "6bf7fc4f-e0f8-4178-ac7c-12bf1f8a70d2",
					"name": "get tasks list",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks?page=0&size=2000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "2000"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'self'; frame-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://storage.googleapis.com; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; img-src 'self' data:; font-src 'self' https://fonts.gstatic.com data:",
							"description": "",
							"type": "text"
						},
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": 1,\n        \"text\": \"\",\n        \"answer\": \"test\",\n        \"title\": \"test\"\n    },\n    {\n        \"id\": 2,\n        \"text\": \"Eum error modi dignissimos error quo laborum et sed sit. Dolor tempore rerum id esse quia dolorum similique esse. Blanditiis quisquam sit occaecati quia totam. Distinctio pariatur consequatur numquam quo eum sed.\",\n        \"answer\": \"Voluptatum culpa sunt odio nihil. Aut labore sit laboriosam quam illo quasi. Nesciunt inventore aliquam expedita fugiat sit consequatur rerum minus. Odit vel sit.\",\n        \"title\": \"Rerum fuga quos. Aliquam quas quia. Dolores earum similique.\"\n    },\n    {\n        \"id\": 3,\n        \"text\": \"Съешь ещё этих мягких французских булок, да выпей же чаю.\",\n        \"answer\": \"Съешь ещё этих мягких французских булок, да выпей же чаю.\",\n        \"title\": \"Съешь ещё этих мягких французских булок, да выпей же чаю.\"\n    },\n    {\n        \"id\": 4,\n        \"text\": \"  ^*%^&%^$%\",\n        \"answer\": \"  &^*&^&*%^$$^%   \",\n        \"title\": \"    &^&^%&^$%^\"\n    },\n    {\n        \"id\": 5,\n        \"text\": \"788-283-4019\",\n        \"answer\": \"Съешь ещё этих мягких французских булок, да выпей же чаю.\",\n        \"title\": \"Съешь ещё этих мягких французских булок, да выпей же чаю.\"\n    },\n    {\n        \"id\": 6,\n        \"text\": \"edit\",\n        \"answer\": \"Task \",\n        \"title\": \" Create\"\n    }\n]"
				},
				{
					"id": "d29f9cc2-9e42-4df7-8b90-19761f7b804a",
					"name": "get tasks list Copy",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks?page=0&size=2000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "2000"
								}
							]
						}
					},
					"status": "Method Not Allowed",
					"code": 405,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Security-Policy",
							"value": "default-src 'self'; frame-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://storage.googleapis.com; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; img-src 'self' data:; font-src 'self' https://fonts.gstatic.com data:",
							"description": "",
							"type": "text"
						},
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "\"Oh, sorry, something went wrong\""
				}
			]
		},
		{
			"name": "create a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8f83bc7e-47b2-4b0b-bc07-f08cca952f12",
						"exec": [
							"//Получаем данные из ответа в формате JSON",
							"let jsonData = pm.response.json();",
							"",
							"// Проверяем, что значение поля \"text\" в ответе соответствует ожидаемому тексту",
							"pm.test(\"Проверка значения поля \\\"text\\\"\", function () {",
							"    pm.expect(jsonData.text).to.eql(\"some text\");",
							"});",
							"",
							"// Получаем массив идентификаторов из переменных окружения",
							"const ids = pm.environment.get(\"ids\");",
							"",
							"// Добавляем новый идентификатор в массив идентификаторов",
							"ids.push(jsonData.id);",
							"",
							"// Устанавливаем обновленный массив идентификаторов в переменную окружения",
							"pm.environment.set(\"ids\", ids);",
							"",
							"// Устанавливаем значение последнего идентификатора в переменную окружения",
							"pm.environment.set('lastID', jsonData.id);",
							"",
							"// Получаем текущее количество задач из переменных окружения",
							"let currentAmountOfTasks = pm.environment.get(\"currentAmountOfTasks\");",
							"",
							"// Увеличиваем счетчик текущего количества задач на 1",
							"currentAmountOfTasks++;",
							"",
							"// Устанавливаем обновленное количество задач в переменную окружения",
							"pm.environment.set('currentAmountOfTasks', currentAmountOfTasks);",
							"",
							"// Устанавливаем следующий запрос в зависимости от текущего количества задач",
							"if (currentAmountOfTasks < pm.environment.get('targetNumberOfTasks')) {",
							"    postman.setNextRequest(\"create a task\");",
							"} else {",
							"    postman.setNextRequest('change task text');",
							"}",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.text).to.eql(\"some text\");",
							"});",
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, text, answer, and title\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('text');",
							"    pm.expect(responseData).to.have.property('answer');",
							"    pm.expect(responseData).to.have.property('title');",
							"});",
							"",
							"",
							"pm.test(\"Text field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Text field should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.id).to.be.a('number');",
							"  pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response status code is 400 when request body is empty\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, text, answer, and title\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('text');",
							"    pm.expect(responseData).to.have.property('answer');",
							"    pm.expect(responseData).to.have.property('title');",
							"});",
							"",
							"",
							"pm.test(\"Text field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Text field should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id must be a non-negative integer\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f4c09b35-b157-492f-8856-9144bd74e066",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					]
				}
			},
			"response": [
				{
					"id": "81bfd83d-992d-4d07-aa0d-a485337850f8",
					"name": "create a task",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						},
						{
							"key": "Permissions-Policy",
							"value": "camera=(), fullscreen=(self), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), sync-xhr=()",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 77777,\n    \"text\": \"some text\",\n    \"answer\": \"string\",\n    \"title\": \"string\"\n}"
				},
				{
					"id": "e32ec6dc-a5f4-4877-ba6c-debfb2ea7f44",
					"name": "create a task - empty request body",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						},
						{
							"key": "Permissions-Policy",
							"value": "camera=(), fullscreen=(self), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), sync-xhr=()",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "\"Failed to read request\""
				}
			]
		},
		{
			"name": "change task text",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fbc5ad09-d3d0-4146-9ef9-e8d632ceaf21",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "80206127-b724-428d-a148-4a17b53e5bcd",
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, text, answer, and title\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('text');",
							"    pm.expect(responseData).to.have.property('answer');",
							"    pm.expect(responseData).to.have.property('title');",
							"});",
							"",
							"",
							"pm.test(\"Text and title are non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Text should not be empty\");",
							"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.id).to.be.a('number');",
							"  pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Answer is either an empty string or a valid response format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.answer).to.satisfy((answer) => {",
							"        return answer === \"\" || (typeof answer === 'string' && answer.length > 0);",
							"    }, 'Answer should be either an empty string or a valid response format');",
							"});",
							"",
							"",
							"pm.test(\"Response status code is 400 when no task id\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response format is in JSON\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Ensure that the 'id' field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('id');",
							"});",
							"",
							"",
							"pm.test(\"Answer field should not be null or undefined\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('answer').and.to.not.be.null.and.to.not.be.undefined;",
							"});",
							"",
							"",
							"pm.test(\"Response status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response content type is 'text/xml'\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/xml\");",
							"});",
							"",
							"",
							"pm.test(\"Response is not null\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    ",
							"    pm.expect(responseData).to.not.be.null;",
							"});",
							"",
							"",
							"pm.test(\"Text field is present in the response\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.text).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Id field is a non-negative integer\", function () {",
							"    const responseData = xml2Json(pm.response.text());",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Text field is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.have.property('text');",
							"});",
							"",
							"",
							"pm.test(\"Ensure that the 'answer' field is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('answer');",
							"});",
							"",
							"",
							"pm.test(\"Title should be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response status code is not 200\", function () {",
							"    pm.expect(pm.response.code).to.not.equal(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "837726f6-709b-443d-971a-224b3a2e2a4e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{lastID}}\",\n  \"text\": \"some new new text\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks/{{lastID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{lastID}}"
					]
				}
			},
			"response": [
				{
					"id": "653dab65-e783-480a-8d9c-40cccda7cec5",
					"name": "change task text",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{lastID}}\",\n  \"text\": \"some new new text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 88888,\n    \"text\": \"some new new text\",\n    \"answer\": \"string\",\n    \"title\": \"string\"\n}"
				},
				{
					"id": "f74fa212-ab59-4742-be66-eaad5cba8964",
					"name": "change task text no task_id",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{lastID}}\",\n  \"text\": \"some new new text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								""
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "\"Sorry, something went wrong. Try again later\""
				}
			]
		},
		{
			"name": "get task data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "32c2d1a1-a4e7-4ef7-8dad-a57db56c829c",
						"exec": [
							"// Получаем массив идентификаторов из переменных окружения",
							"let arr = pm.environment.get('ids')",
							"",
							"// Получаем базовый URL из переменных окружения",
							"let baseUrl = pm.environment.get('baseUrl')",
							"",
							"// Удаление всех созданных тасок, которые хранятся в массиве с id тасок",
							"arr.forEach((id)=>{",
							"    pm.sendRequest(",
							"        {url: `${baseUrl}/tasks/${id}`,",
							"        method: 'DELETE',",
							"        header:",
							"        {'Authorization': 'Bearer ' + pm.environment.get('token'),",
							"        'accept': '*/*'}",
							"        }",
							"        , function (err, response) {",
							"        console.log(response);",
							"    });",
							"})",
							"",
							"// Удаляем переменные из окружения для очистки базы данных после завершения тестирования",
							"pm.environment.unset('lastID');",
							"pm.environment.unset('targetNumberOfTasks');",
							"pm.environment.unset('currentAmountOfTasks');",
							"pm.environment.unset('ids');",
							"pm.environment.unset('token');",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, text, answer, and title\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('id');",
							"  pm.expect(responseData).to.have.property('text');",
							"  pm.expect(responseData).to.have.property('answer');",
							"  pm.expect(responseData).to.have.property('title');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('number');",
							"  pm.expect(responseData.id).to.be.at.least(0);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "9dd34112-a373-416b-ad2d-11619dc3006d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks/{{lastID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{lastID}}"
					]
				}
			},
			"response": [
				{
					"id": "ba94097e-cd6c-4475-8d70-fe657eea535d",
					"name": "get task data",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{lastID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"{{lastID}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						},
						{
							"key": "Permissions-Policy",
							"value": "camera=(), fullscreen=(self), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), sync-xhr=()",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 88888,\n    \"text\": \"some new new text\",\n    \"answer\": \"string\",\n    \"title\": \"string\"\n}"
				},
				{
					"id": "35dd0a97-b1cb-474c-af30-3a087001605d",
					"name": "get task data Copy",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								""
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"name": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						},
						{
							"key": "Permissions-Policy",
							"value": "camera=(), fullscreen=(self), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), sync-xhr=()",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "\"Sorry, something went wrong. Try again later\""
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c1dd919d-e516-493d-b62d-1f928c0472ca",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f80dabf5-6d07-4dff-a80b-8785821cdf79",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}